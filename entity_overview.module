<?php

/**
 * @file
 * Provides API for autogenerated entity overview pages.
 */

/**
 * Determines the UI overview controller class for a given entity type.
 *
 * @return EntityOverviewDefaultUIController
 *   If a type is given, the overview controller for the given entity type.
 *   Else an array of all enabled UI controllers keyed by entity
 *   type is returned.
 */
function entity_overview_controller($args = array()) {
  $static = &drupal_static(__FUNCTION__);

  $type = $args[0];
  $info = $args[1];

  if (!isset($static[$type])) {
    $class = isset($info['overview ui']['controller class']) ? $info['overview ui']['controller class'] : 'EntityOverviewDefaultUIController';
    if (isset($info['overview ui']['path']) && $class) {
      $r = new ReflectionClass($class);
      $static[$type] = $r->newInstanceArgs($args);
    }
    else {
      $static[$type] = FALSE;
    }
  }

  return $static[$type];
}

/**
 * Determines the list of enabled UI overview controller classes for use in
 * core/contrib hooks.
 *
 * @return array
 *  Array of all enabled overview UI controllers.
 */
function entity_overview_hook_controllers() {
  $static = &drupal_static(__FUNCTION__);

  if (empty($static)) {
    foreach (entity_get_info() as $type => $info) {
      $class = isset($info['overview ui']['controller class']) ? $info['overview ui']['controller class'] : 'EntityOverviewDefaultUIController';
      $static[$type] = (isset($info['overview ui']['path']) && $class) ? new $class($type, $info) : FALSE;
    }
  }

  return array_filter($static);
}

/**
 * Implements hook_menu();
 *
 * @see EntityOverviewDefaultUIController::hook_menu()
 */
function entity_overview_menu() {
  $items = array();
  foreach (entity_overview_hook_controllers() as $controller) {
    $items += $controller->hook_menu();
  }

  return $items;
}

/**
 * Implements hook_permission();
 *
 * @see EntityOverviewDefaultUIController::hook_permission()
 */
function entity_overview_permission() {
  $permissions = array();
  foreach (entity_overview_hook_controllers() as $controller) {
    $permissions += $controller->hook_permission();
  }
  return $permissions;
}

/**
 * Checks if user has access to the entity overview page.
 *
 * @return boolean
 *  Whether user has access to a given overview page.
 */
function entity_overview_access() {
  $controller = entity_overview_controller(func_get_args());
  if ($controller) {
    return $controller->access();
  }
  else {
    return FALSE;
  }
}

/**
 * Returns filter form for a particular entity.
 */
function entity_overview_filter_form($form, &$form_state) {
  $form_state['type'] = $form_state['args'][0];
  $form_state['options'] = filter_form_get_values($form_state['type']);
  $controller = entity_overview_controller(array($form_state['type'], array()));

  return $controller->filterForm($form, $form_state);
}
